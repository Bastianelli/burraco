/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.bastianelli.personale.burraco.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import it.bastianelli.personale.burraco.model.Round;
import it.bastianelli.personale.burraco.model.RoundModel;
import it.bastianelli.personale.burraco.model.RoundSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Round service. Represents a row in the &quot;BURRACO_Round&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>RoundModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RoundImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see RoundImpl
 * @generated
 */
@JSON(strict = true)
public class RoundModelImpl extends BaseModelImpl<Round> implements RoundModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a round model instance should use the <code>Round</code> interface instead.
	 */
	public static final String TABLE_NAME = "BURRACO_Round";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"roundId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"gameId", Types.BIGINT}, {"pots", Types.BOOLEAN},
		{"cleanRun", Types.INTEGER}, {"dirtyRun", Types.INTEGER},
		{"score", Types.INTEGER}, {"opponentUserId", Types.BIGINT},
		{"opponentUserName", Types.VARCHAR}, {"opponentPots", Types.BOOLEAN},
		{"opponentCleanRun", Types.INTEGER},
		{"opponentDirtyRun", Types.INTEGER}, {"opponentScore", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("roundId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gameId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pots", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("cleanRun", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dirtyRun", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("score", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("opponentUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("opponentUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("opponentPots", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("opponentCleanRun", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("opponentDirtyRun", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("opponentScore", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table BURRACO_Round (uuid_ VARCHAR(75) null,roundId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,gameId LONG,pots BOOLEAN,cleanRun INTEGER,dirtyRun INTEGER,score INTEGER,opponentUserId LONG,opponentUserName VARCHAR(75) null,opponentPots BOOLEAN,opponentCleanRun INTEGER,opponentDirtyRun INTEGER,opponentScore INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table BURRACO_Round";

	public static final String ORDER_BY_JPQL = " ORDER BY round.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY BURRACO_Round.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GAMEID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long UUID_COLUMN_BITMASK = 8L;

	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Round toModel(RoundSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Round model = new RoundImpl();

		model.setUuid(soapModel.getUuid());
		model.setRoundId(soapModel.getRoundId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setGameId(soapModel.getGameId());
		model.setPots(soapModel.isPots());
		model.setCleanRun(soapModel.getCleanRun());
		model.setDirtyRun(soapModel.getDirtyRun());
		model.setScore(soapModel.getScore());
		model.setOpponentUserId(soapModel.getOpponentUserId());
		model.setOpponentUserName(soapModel.getOpponentUserName());
		model.setOpponentPots(soapModel.isOpponentPots());
		model.setOpponentCleanRun(soapModel.getOpponentCleanRun());
		model.setOpponentDirtyRun(soapModel.getOpponentDirtyRun());
		model.setOpponentScore(soapModel.getOpponentScore());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Round> toModels(RoundSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Round> models = new ArrayList<Round>(soapModels.length);

		for (RoundSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public RoundModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _roundId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRoundId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _roundId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Round.class;
	}

	@Override
	public String getModelClassName() {
		return Round.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Round, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Round, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Round, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Round)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Round, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Round, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Round)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Round, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Round, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Round>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Round.class.getClassLoader(), Round.class, ModelWrapper.class);

		try {
			Constructor<Round> constructor =
				(Constructor<Round>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Round, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Round, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Round, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Round, Object>>();
		Map<String, BiConsumer<Round, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Round, ?>>();

		attributeGetterFunctions.put("uuid", Round::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Round, String>)Round::setUuid);
		attributeGetterFunctions.put("roundId", Round::getRoundId);
		attributeSetterBiConsumers.put(
			"roundId", (BiConsumer<Round, Long>)Round::setRoundId);
		attributeGetterFunctions.put("groupId", Round::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Round, Long>)Round::setGroupId);
		attributeGetterFunctions.put("companyId", Round::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Round, Long>)Round::setCompanyId);
		attributeGetterFunctions.put("userId", Round::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Round, Long>)Round::setUserId);
		attributeGetterFunctions.put("userName", Round::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Round, String>)Round::setUserName);
		attributeGetterFunctions.put("createDate", Round::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Round, Date>)Round::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Round::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Round, Date>)Round::setModifiedDate);
		attributeGetterFunctions.put("gameId", Round::getGameId);
		attributeSetterBiConsumers.put(
			"gameId", (BiConsumer<Round, Long>)Round::setGameId);
		attributeGetterFunctions.put("pots", Round::getPots);
		attributeSetterBiConsumers.put(
			"pots", (BiConsumer<Round, Boolean>)Round::setPots);
		attributeGetterFunctions.put("cleanRun", Round::getCleanRun);
		attributeSetterBiConsumers.put(
			"cleanRun", (BiConsumer<Round, Integer>)Round::setCleanRun);
		attributeGetterFunctions.put("dirtyRun", Round::getDirtyRun);
		attributeSetterBiConsumers.put(
			"dirtyRun", (BiConsumer<Round, Integer>)Round::setDirtyRun);
		attributeGetterFunctions.put("score", Round::getScore);
		attributeSetterBiConsumers.put(
			"score", (BiConsumer<Round, Integer>)Round::setScore);
		attributeGetterFunctions.put(
			"opponentUserId", Round::getOpponentUserId);
		attributeSetterBiConsumers.put(
			"opponentUserId",
			(BiConsumer<Round, Long>)Round::setOpponentUserId);
		attributeGetterFunctions.put(
			"opponentUserName", Round::getOpponentUserName);
		attributeSetterBiConsumers.put(
			"opponentUserName",
			(BiConsumer<Round, String>)Round::setOpponentUserName);
		attributeGetterFunctions.put("opponentPots", Round::getOpponentPots);
		attributeSetterBiConsumers.put(
			"opponentPots", (BiConsumer<Round, Boolean>)Round::setOpponentPots);
		attributeGetterFunctions.put(
			"opponentCleanRun", Round::getOpponentCleanRun);
		attributeSetterBiConsumers.put(
			"opponentCleanRun",
			(BiConsumer<Round, Integer>)Round::setOpponentCleanRun);
		attributeGetterFunctions.put(
			"opponentDirtyRun", Round::getOpponentDirtyRun);
		attributeSetterBiConsumers.put(
			"opponentDirtyRun",
			(BiConsumer<Round, Integer>)Round::setOpponentDirtyRun);
		attributeGetterFunctions.put("opponentScore", Round::getOpponentScore);
		attributeSetterBiConsumers.put(
			"opponentScore",
			(BiConsumer<Round, Integer>)Round::setOpponentScore);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getRoundId() {
		return _roundId;
	}

	@Override
	public void setRoundId(long roundId) {
		_roundId = roundId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getGameId() {
		return _gameId;
	}

	@Override
	public void setGameId(long gameId) {
		_columnBitmask |= GAMEID_COLUMN_BITMASK;

		if (!_setOriginalGameId) {
			_setOriginalGameId = true;

			_originalGameId = _gameId;
		}

		_gameId = gameId;
	}

	public long getOriginalGameId() {
		return _originalGameId;
	}

	@JSON
	@Override
	public boolean getPots() {
		return _pots;
	}

	@JSON
	@Override
	public boolean isPots() {
		return _pots;
	}

	@Override
	public void setPots(boolean pots) {
		_pots = pots;
	}

	@JSON
	@Override
	public int getCleanRun() {
		return _cleanRun;
	}

	@Override
	public void setCleanRun(int cleanRun) {
		_cleanRun = cleanRun;
	}

	@JSON
	@Override
	public int getDirtyRun() {
		return _dirtyRun;
	}

	@Override
	public void setDirtyRun(int dirtyRun) {
		_dirtyRun = dirtyRun;
	}

	@JSON
	@Override
	public int getScore() {
		return _score;
	}

	@Override
	public void setScore(int score) {
		_score = score;
	}

	@JSON
	@Override
	public long getOpponentUserId() {
		return _opponentUserId;
	}

	@Override
	public void setOpponentUserId(long opponentUserId) {
		_opponentUserId = opponentUserId;
	}

	@Override
	public String getOpponentUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getOpponentUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setOpponentUserUuid(String opponentUserUuid) {
	}

	@JSON
	@Override
	public String getOpponentUserName() {
		if (_opponentUserName == null) {
			return "";
		}
		else {
			return _opponentUserName;
		}
	}

	@Override
	public void setOpponentUserName(String opponentUserName) {
		_opponentUserName = opponentUserName;
	}

	@JSON
	@Override
	public boolean getOpponentPots() {
		return _opponentPots;
	}

	@JSON
	@Override
	public boolean isOpponentPots() {
		return _opponentPots;
	}

	@Override
	public void setOpponentPots(boolean opponentPots) {
		_opponentPots = opponentPots;
	}

	@JSON
	@Override
	public int getOpponentCleanRun() {
		return _opponentCleanRun;
	}

	@Override
	public void setOpponentCleanRun(int opponentCleanRun) {
		_opponentCleanRun = opponentCleanRun;
	}

	@JSON
	@Override
	public int getOpponentDirtyRun() {
		return _opponentDirtyRun;
	}

	@Override
	public void setOpponentDirtyRun(int opponentDirtyRun) {
		_opponentDirtyRun = opponentDirtyRun;
	}

	@JSON
	@Override
	public int getOpponentScore() {
		return _opponentScore;
	}

	@Override
	public void setOpponentScore(int opponentScore) {
		_opponentScore = opponentScore;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Round.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Round.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Round toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Round>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RoundImpl roundImpl = new RoundImpl();

		roundImpl.setUuid(getUuid());
		roundImpl.setRoundId(getRoundId());
		roundImpl.setGroupId(getGroupId());
		roundImpl.setCompanyId(getCompanyId());
		roundImpl.setUserId(getUserId());
		roundImpl.setUserName(getUserName());
		roundImpl.setCreateDate(getCreateDate());
		roundImpl.setModifiedDate(getModifiedDate());
		roundImpl.setGameId(getGameId());
		roundImpl.setPots(isPots());
		roundImpl.setCleanRun(getCleanRun());
		roundImpl.setDirtyRun(getDirtyRun());
		roundImpl.setScore(getScore());
		roundImpl.setOpponentUserId(getOpponentUserId());
		roundImpl.setOpponentUserName(getOpponentUserName());
		roundImpl.setOpponentPots(isOpponentPots());
		roundImpl.setOpponentCleanRun(getOpponentCleanRun());
		roundImpl.setOpponentDirtyRun(getOpponentDirtyRun());
		roundImpl.setOpponentScore(getOpponentScore());

		roundImpl.resetOriginalValues();

		return roundImpl;
	}

	@Override
	public int compareTo(Round round) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), round.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Round)) {
			return false;
		}

		Round round = (Round)object;

		long primaryKey = round.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		_originalUuid = _uuid;

		_originalGroupId = _groupId;

		_setOriginalGroupId = false;

		_originalCompanyId = _companyId;

		_setOriginalCompanyId = false;

		_setModifiedDate = false;
		_originalGameId = _gameId;

		_setOriginalGameId = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Round> toCacheModel() {
		RoundCacheModel roundCacheModel = new RoundCacheModel();

		roundCacheModel.uuid = getUuid();

		String uuid = roundCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			roundCacheModel.uuid = null;
		}

		roundCacheModel.roundId = getRoundId();

		roundCacheModel.groupId = getGroupId();

		roundCacheModel.companyId = getCompanyId();

		roundCacheModel.userId = getUserId();

		roundCacheModel.userName = getUserName();

		String userName = roundCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			roundCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			roundCacheModel.createDate = createDate.getTime();
		}
		else {
			roundCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			roundCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			roundCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		roundCacheModel.gameId = getGameId();

		roundCacheModel.pots = isPots();

		roundCacheModel.cleanRun = getCleanRun();

		roundCacheModel.dirtyRun = getDirtyRun();

		roundCacheModel.score = getScore();

		roundCacheModel.opponentUserId = getOpponentUserId();

		roundCacheModel.opponentUserName = getOpponentUserName();

		String opponentUserName = roundCacheModel.opponentUserName;

		if ((opponentUserName != null) && (opponentUserName.length() == 0)) {
			roundCacheModel.opponentUserName = null;
		}

		roundCacheModel.opponentPots = isOpponentPots();

		roundCacheModel.opponentCleanRun = getOpponentCleanRun();

		roundCacheModel.opponentDirtyRun = getOpponentDirtyRun();

		roundCacheModel.opponentScore = getOpponentScore();

		return roundCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Round, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(4 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Round, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Round, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Round)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Round, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Round, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Round, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Round)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Round>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _roundId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _gameId;
	private long _originalGameId;
	private boolean _setOriginalGameId;
	private boolean _pots;
	private int _cleanRun;
	private int _dirtyRun;
	private int _score;
	private long _opponentUserId;
	private String _opponentUserName;
	private boolean _opponentPots;
	private int _opponentCleanRun;
	private int _opponentDirtyRun;
	private int _opponentScore;
	private long _columnBitmask;
	private Round _escapedModel;

}